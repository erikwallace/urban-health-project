
/* ==========================================================================*\
   $SETUP MIXINS, FUNCTIONS, VARIABLES
\* ==========================================================================*/

/**
 * PIXEL TO EM FUNCTION
 *
 * How to use: font-size: em(16);
 */

//  Set a base font size for px > em conversion
$base-fontSize: 16;

@function em($pixels, $context: $base-fontSize) {
  @return #{$pixels/$context}em
}



/**
 * TYPOGRAPHY SASS MAP
 *
 * Note: null is the smallest size, not triggered by a media query
 *
 * How to use: define pixel size then use parentheses to set a line-height
 */

$breakpoints: (
  small  : 480px,
  medium : 700px,
  large  : 1024px
);

$xxlg-font-sizes: (
  null   : (em(22), 1),
  medium : (em(34), 1.1),
  large  : (em(36), 1.1)
);

$xlg-font-sizes: (
  null   : (em(24), 1.2),
  medium : (em(26), 1.3),
  large  : (em(28), 1.3)
);

$lg-font-sizes: (
  null   : (em(18), 1.4),
  medium : (em(20), 1.5),
  large  : (em(22), 1.5)
);

$md-font-sizes: (
  null   : (em(16), 1.5),
  medium : (em(17), 1.5),
  large  : (em(18), 1.4)
);

// Also used for <h5>
$base-font-sizes: (
  null   : (em(16), 1.4),
  medium : (em(17), 1.5),
  large  : (em(18), 1.5)
);

$sm-font-sizes: (
  null   : (em(13), 1.2),
  medium : (em(13), 1.3)
);



/**
 * MEDIA QUERY MIXIN
 *
 * Generates the right media query per size variable
 */

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}



/**
 * FUNCTION
 *
 * Utility function for mixin font-size
 */

@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}



/* ==========================================================================*\
   $TYPOGRAPHY STYLES
\* ==========================================================================*/

html {
  line-height: 1.4;
}

h1,
.sz-TypeXXLg {
  @include font-size($xxlg-font-sizes);
  // letter-spacing: -1px;
}

h2,
.sz-TypeXLg {
  @include font-size($xlg-font-sizes);
}

h3,
.sz-TypeLg,
.fe-Title {
  @include font-size($lg-font-sizes);
}

h4,
.sz-TypeMd {
  @include font-size($md-font-sizes);
}

p,
ol,
ul,
h5,
.sz-TypeBase,
.fe-Description {
  @include font-size($base-font-sizes);
}

small,
.sz-TypeSm,
.btn-primary {
  @include font-size($sm-font-sizes);
}



/* ==========================================================================*\
   $TODO :: IN PROGRESS
\* ==========================================================================*/

/**
 * BEGIN NAMED CLASSES - AVOID STYLING HTML ELEMENTS DIRECTLY
 */

h1 {
  margin: 0;
  padding-bottom: 16px;
}

h2 {
  margin: 0;
  padding: 8px 0;
}

h3 {
  margin: 0;
  padding: 8px 0;
  text-transform: uppercase;
}

h4 {
  margin: 0;
  padding: 8px 0;
}

p {
  margin: 0;
  padding-bottom: 16px;
}



/* ==========================================================================*\
   $LINKS
\* ==========================================================================*/

a {
  color: $color-link;
  text-decoration: underline;
}

a:hover {
  color: darken($color-link, 15%);
  text-decoration: none;
}